{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to spatial multiomics data analysis in plants!","text":"<p>\u2b50 This is practical guide for spatial multiomics data analysis in plants.</p> <p></p> <p>Recent advancements in plant spatial omics, including spatial transcriptomics and metabolomics, offer detailed cellular information by integrating spatial positional data. When combined with single-cell technologies such as sc/snRNA-seq and scATAC-seq, these methods significantly enhance the study of complex biological processes like plant cell development, plant-microbe interactions, stress responses, and the evolution of cell types across species. However, plant cells possess unique traits, such as specialized cell walls and considerable size variability, requiring the adaptation of human-based data analysis strategies for plant research. This review outlines the current research landscape and provides a comprehensive overview of strategies for acquiring plant spatial multi-omics data, as well as the preprocessing workflows and analysis techniques used in the field. Additionally, we present a spatial multi-omics dataset on the mature seed in plants and provide a detailed tutorial to demonstrate the practical application of these advanced tools and methods in research settings. This work aims to provide valuable resources and guidance to practitioners and researchers in the field of plant spatial multi-omics.</p> <p>For more details about the this guide, please check out our publication.</p>"},{"location":"#contact","title":"Contact\u00b6","text":"<p>Jie Yao (andy-yaoj@zju.edu.cn)</p>"},{"location":"#publication","title":"Publication","text":"<p>Jie Yao, Alexander P. Marand,  Longjiang Fan, \"Advances in plant spatial multiomics data analysis\". 2025.</p>"},{"location":"1_preprocess/","title":"Preprocess","text":""},{"location":"1_preprocess/#1-data-aquisition","title":"1. Data aquisition","text":"<p>We categorize the preprocessing of plant ST data into four parts: data acquisition, defining spatial units, constructing a spatial matrix with coordinates, and quality control. </p> <p>Here we use the data from the paper \"Spatiotemporal transcriptomic landscape of rice embryonic cells during seed germination\", it is a <code>rice seed embryo</code> spatial transcriptomics dataset from <code>stereo-seq</code>. - The data has been aligned, quantified and barcode mapped through the SAW workflow - The data input here is GEM file, which is the output of the SAW workflow. - The dataset is available at Spatial Transcript Omics DataBase, STOmics DB STT0000049 - The pipiline stereppy is used to process the data. It accepts the GEM/GEF file (from Sterep-seq) and H5ad (output from scanpy) as input.</p> <pre><code>import sys\nimport os\nimport warnings\nimport stereo as st\nwarnings.filterwarnings('ignore')\n</code></pre> <pre><code>data_path = '/home/yaoj/Review_plant_Spatial_multiomics_data_analysis/data/A5_1_bin1.gem.gz'\n# read GEM file information\nst.io.read_gem(data_path)\n</code></pre>"},{"location":"1_preprocess/#2-define-spatial-units","title":"2. Define spatial units","text":""},{"location":"1_preprocess/#21-bin-segmentation","title":"2.1 Bin segmentation","text":"<p>Bin segmentation is simpler and more widely adopted, where the key step involves determining the appropriate bin size. The average cell size within the tissue is estimated using image information, and tools like <code>ImageJ</code>, and <code>CaseViewer</code> are often employed. The bin size can then be optimized based on clustering results, ensuring the clusters correspond to distinct cell types and are biologically interpretable </p> <p>We estimate the average cell size in this rice seed embryo dataset is 25 \u03bcm\u00b2. - Cell side length = X * ST_resolution - X is the bin size, in Bin 50, stereo-seq resolution is 0.5 um, the cell side length is 50 * 0.5 = 25 um</p> <p><pre><code># define the bin size= 50\ndata = st.io.read_gem(file_path=data_path, bin_size=50)\ndata\n</code></pre>     StereoExpData object with n_cells X n_genes = 2566 X 25320     bin_type: bins     bin_size: 50     offset_x = 10025     offset_y = 8025     cells: ['cell_name']     genes: ['gene_name']     cells_matrix = ['spatial']     Layers with keys:      result: []</p> <pre><code>#data.tl.cal_qc()\ndata.plt.spatial_scatter()\n</code></pre> <pre><code>[2025-01-18 03:31:51][Stereo][433552][MainThread][140065997267328][st_pipeline][41][INFO]: start to run cal_qc...\n[2025-01-18 03:31:52][Stereo][433552][MainThread][140065997267328][st_pipeline][44][INFO]: cal_qc end, consume time 0.1649s.\n\nBokehModel(combine_events=True, render_bundle={'docs_json': {'eee6ab55-1588-4559-888b-5eee0a19dc22': {'defs': \u2026\n</code></pre> <p></p> <p>Test bin size = 30,50,80,100, and compare the results</p> <pre><code>import panel as pn\ndef compare_multiple_bins(file_path, bin_sizes=[30, 50, 80, 100]):\n    plots = []  # \u5b58\u50a8\u6240\u6709\u56fe\u5f62\u5bf9\u8c61\n    for bin_size in bin_sizes:\n        # \u8bfb\u53d6\u6570\u636e\n        data = st.io.read_gem(file_path=file_path, bin_size=bin_size)\n        data.tl.cal_qc()\n\n        # plot spatial scatter\n        plot = data.plt.spatial_scatter(\n            cells_key=['n_genes_by_counts'],\n            width=2,\n            height=2,\n            title=[f'bin size = {bin_size}']\n        )\n        plots.append(plot)\n\n    # use panel's Row layout to display all plots side by side\n    return pn.Row(*plots)\n\n# use the function\npn.extension()  # initialize panel\ncombined_plot = compare_multiple_bins(data_path)\ncombined_plot\n</code></pre> <p></p>"},{"location":"1_preprocess/#22-cell-segmentation","title":"2.2 Cell segmentation","text":"<p>Cell segmentation offers a more granular approach, especially in tissues where cell size exhibit considerable variability. Recent advancements in segmentation tools allow for more precise delineation of individual cells, typically using cell wall staining images and manually annotated training models. Popular tools include <code>Cellpose2/3</code>, <code>StarDist</code>. Comprehensive ST frameworks, such as <code>STCellBin</code>, support segmentation based on models trained with Arabidopsis seed cell segmentation ground truth.</p> <ul> <li>Here we use <code>Cellpose2</code> to segment the cells.</li> <li>The model we trained according to the cell wall staining images of rice seed embryo is available at https://github.com/YAOJ-bioin/REGSTA-script</li> </ul> <p><pre><code>##cell segmentation\n#cellpose installation\n#download environment.yml from https://github.com/MouseLand/cellpose\n#cmd\nconda env create -f environment.yml\nconda activate cellpose\npip install cellpose\n\n\n#prediction:\npython -m cellpose  --exclude_on_edges  --dir .\\data4test\\img --diameter 0  --save_outlines  --save_txt  --in_folders --verbose --flow_threshold 5 --pretrained_model .\\model\\cellpose_residual_on_style_on_concatenation_off_CP_1_2022_11_26_02_48_20.469512\n\n#--dir  (only slice images saving path)\n#--save_txt   (\"outlices.txt\" whice serves as cell segmentation result in next step ,will be saved in a folder which is named \"txt_outlines\")\n#--pretrained_model  (path of auto-segmentation model)\n</code></pre> </p>"},{"location":"1_preprocess/#3-construct-a-spatial-matrix-with-coordinates","title":"3. Construct a spatial matrix with coordinates","text":""},{"location":"1_preprocess/#4-quality-control-and-data-optimization","title":"4. Quality control and data optimization","text":""},{"location":"1_preprocess/#41-quality-control","title":"4.1 Quality control","text":""},{"location":"1_preprocess/#42-data-imputation","title":"4.2 data imputation","text":""},{"location":"1_preprocess/#43-batch-correction","title":"4.3 batch correction","text":""}]}